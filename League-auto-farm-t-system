local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "T_Swim_League v1." .. Fluent.Version,
    SubTitle = "T_Hub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Rose",
    MinimizeKey = Enum.KeyCode.E -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "menu" }),
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "You Can Close And Open The Gui With E",
        SubContent = "T_Swim_League", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    Tabs.Main:AddButton({
        Title = "‚ôæÔ∏èInfinity Jumpü¶ò",
        Description = "",
        Callback = function()
                       --Toggles the infinite jump between on or off on every script run
_G.infinjump = not _G.infinjump

if _G.infinJumpStarted == nil then
	--Ensures this only runs once to save resources
	_G.infinJumpStarted = true
	
	--Notifies readiness
	game.StarterGui:SetCore("SendNotification", {Title="T_Hub"; Text="Infinite Jump Activated!"; Duration=5;})

	--The actual infinite jump
	local plr = game:GetService('Players').LocalPlayer
	local m = plr:GetMouse()
	m.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
			humanoid = game:GetService'Players'.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
			humanoid:ChangeState('Jumping')
			wait()
			humanoid:ChangeState('Seated')
			end
		end
	end)
end
   end,
    })


    Tabs.Main:AddButton({
        Title = "Rejoin[Same Server]",
        Description = "Rejoins same server",
        Callback = function()
                loadstring(game:HttpGet('https://raw.githubusercontent.com/Jelly-plays/Rejoin-script/main/obf_L744By559M18BbuseSG6en8r1zL31daK9060LV7WyvmS4bQp92aONWfwRE36FdcZ.lua.txt'))()
        end,
    })


    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "üö∂WalkSpeed",
        Description = "This is a Walk Speed Slider",
        Default = 16,
        Min = 16,
        Max = 1500,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
        end
    })

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "ü¶òJumpPower",
        Description = "This is a Jump Power Slider",
        Default = 35,
        Min = 35,
        Max = 1500,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
        end
    })

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "üß≤Gravity",
        Description = "This is a Gravity Slider",
        Default = 75,
        Min = 35,
        Max = 500,
        Rounding = 1,
        Callback = function(Value)
            game:GetService("Workspace").Gravity = (Value)
        end
    })

    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "üëÅÔ∏èFov",
        Description = "This is a Fov Slider",
        Default = 75,
        Min = 50,
        Max = 150,
        Rounding = 1,
        Callback = function(Value)
            game:GetService("Workspace"):WaitForChild("Camera").FieldOfView = (Value)
        end
    })
    
local Tabs = {
    Farm = Window:AddTab({ Title = "Farm", Icon = "clipboard" }),
}

    Tabs.Farm:AddButton({
        Title = "Auto Farm",
        Description = "click 1 time and go to training",
        Callback = function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/T-Hub-System/SwimLeague/refs/heads/main/fastfarm"))()
        end,
    })


loadstring(game:HttpGet('https://raw.githubusercontent.com/cdr123-3f/noti/refs/heads/main/notification'))()

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "T_Swim_League",
    Content = "T_Swim_League been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
